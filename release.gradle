apply plugin: 'maven'
apply plugin: 'maven-publish'

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

javadoc() {
    failOnError = false
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
}

project.ext.githubUserName = project.hasProperty('githubUserName') ? githubUserName : ""
project.ext.githubToken = project.hasProperty('githubToken') ? githubToken : ""

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)

            groupId 'com.epam.reportportal'
            artifactId "$project.name"

            pom.withXml {
                def root = asNode()
                root.dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.shadow.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
                root.children().last() + pomConfig
            }

            artifact project.tasks.javadocJar
            artifact project.tasks.sourcesJar
        }
    }

    repositories {
        maven {
            name = "Client GitHub Packages"
            url = uri("https://maven.pkg.github.com/reportportal/client-java")
            credentials {
                username = githubUserName
                password = githubToken
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['shadow']
    publish = true
    pkg {
        repo = 'reportportal'
        name = "$project.name"
        desc = "$project.description"
        websiteUrl = 'https://reportportal.github.io/'
        issueTrackerUrl = "https://github.com/reportportal/$project.name/issues"
        vcsUrl = "https://github.com/reportportal/$project.name"
        githubRepo = "reportportal/$project.name"
        githubReleaseNotesFile = 'CHANGELOG.md'

        userOrg = 'epam'
        licenses = ['Apache-2.0']
    }
}

//def releaseDependencies = [bintrayUpload, publish]
def releaseDependencies = [bintrayUpload]
releaseDependencies.addAll(afterReleaseBuild.getDependsOn())
afterReleaseBuild.setDependsOn(releaseDependencies)
